//this template cannot handle self-loops
#include<bits/stdc++.h>
#define line cout<<"\n"
#define ll long long
#define in(a) cin>>a
#define out(a) cout<<a<<" "
//lp long long pair
#define flf(a,b,i) for(ll i=a;i<b;++i)
using namespace std;
typedef pair<ll, ll> lp;
ll i;
ll inf = 100000000000;
//this struct acts as an comparator for our given set of pairs
struct CompareDist {
    bool operator() (const pair<ll, ll> &lhs,const pair<ll, ll> &rhs) {
        return lhs.second > rhs.second;
    }
};
struct graph{
    ll v;
    list<lp > *adj;
    ll *dis,*vis;
    priority_queue<lp,vector<lp>,greater<lp> > pq;
    graph(ll V){
        v=V;
        adj = new list<lp> [v];
        dis = new ll[v];
        vis = new ll[v];
    }
    void addEdge(ll u,ll v,ll w){
        lp temp;
        temp.first = v; temp.second = w;
        adj[u].push_back(temp);
    }
    void djikstra(ll s);
};
void graph::djikstra(ll s){
        lp temp; 
        temp.first = s; temp.second = 0;
        pq.push(temp);
        flf(0,v,i)dis[i]=inf;
        dis[s] = 0;
        while(!pq.empty()){
            ll node = pq.top().first;
            pq.pop();
            if(vis[node]){
                continue;
            }
            vis[node] = 1;
            for(list<lp>::iterator it = adj[node].begin(); it!= adj[node].end(); ++it){
                ll v = (*it).first; ll w = (*it).second;
                if(dis[v] > dis[node] + w){
                    dis[v] = dis[node] + w;
                    pq.push(make_pair(v,dis[v]));
                }
            }
        }    
}
int main(){
    ll t,z; in(t);
    flf(0,t,z){
        //out("here");
        ll v,e;
        cin>>v>>e;
        graph G(v);
        //out("sdfj");
        flf(0,e,i){
            //out("inside loop\n");
            ll p,q,w;
            cin>>p>>q>>w;
            p--; q--;
            G.addEdge(p,q,w);
            G.addEdge(q,p,w);
        }
        //out("there");
        ll s; in(s);
        s--;
        //out("where");
        G.djikstra(s);
        ll k;
        //out("test case no");out(z);
        //out("\n");
        flf(0,v,k){
            if(G.dis[k] < 100000000000 && k!=s){
                cout<<G.dis[k]<<" ";
            }
            else if(k != s){
                out("-1");
            }
        }
        cout<<"\n";
    }
    return 0;
}
